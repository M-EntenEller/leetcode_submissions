{"id":1084932889,"question_id":110,"lang":"c","lang_name":"C","time":"5Â months","timestamp":1698357422,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1084932889/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"9.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\nstruct HB{\n    int h;\n    char b;\n};\n\nstruct HB get_hb(struct TreeNode* node){\n    \n    if (node==NULL){\n        struct HB res = {0, 1};\n        return res;\n    }\n\n    struct HB l = get_hb(node->left);\n    struct HB r = get_hb(node->right);\n    \n    if (l.h < r.h){\n        struct HB tmp = l;\n        l = r;\n        r = tmp;\n    }\n\n    char kidsBalanced = l.b && r.b;\n    char nodeBalanced = kidsBalanced && (l.h - r.h <= 1);\n    \n    struct HB res = {l.h + 1, nodeBalanced};\n    return res;\n}\n\nbool isBalanced(struct TreeNode* root){\n\n    return get_hb(root).b;\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}