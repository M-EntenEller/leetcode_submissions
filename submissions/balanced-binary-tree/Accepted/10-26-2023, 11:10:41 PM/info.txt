{"id":1084912543,"question_id":110,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1698354641,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1084912543/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"43 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    class Dat{\n        int height;\n        boolean balanced;\n        public Dat(int x, boolean b){\n            this.height = x;\n            this.balanced = b;\n        }\n    }\n\n    public Dat hb(TreeNode node){\n\n        if (node==null){\n            return new Dat(0, true);\n        }\n\n        Dat l = hb(node.left);\n        Dat r = hb(node.right);\n\n        boolean balancedKids = l.balanced && r.balanced;\n        int heightDelta = l.height - r.height >= 0 ? l.height - r.height : -(l.height - r.height);\n        boolean balancedNode = heightDelta <= 1 && balancedKids;\n        int heightNode = l.height <= r.height ? r.height + 1 : l.height + 1;\n\n        return new Dat(heightNode, balancedNode);\n\n    }\n\n    public boolean isBalanced(TreeNode root) {\n\n        return hb(root).balanced;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}