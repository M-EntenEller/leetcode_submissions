{"id":1084625253,"question_id":110,"lang":"python3","lang_name":"Python3","time":"5Â months","timestamp":1698327857,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/1084625253/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"21.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n\n        def hb(node):\n            \n            if node == None: \n                return [1, True]\n\n            l = hb(node.left)\n            r = hb(node.right)\n            child_good = l[1] and r[1]\n            node_good = abs(l[0] - r[0]) <= 1\n            \n            return [max(l[0],r[0]) + 1, child_good and node_good]\n\n        return hb(root)[1] \n\n        \n\n            \n\n        \n\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}