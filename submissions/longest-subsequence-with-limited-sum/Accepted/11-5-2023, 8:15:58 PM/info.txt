{"id":1092264934,"question_id":2469,"lang":"python3","lang_name":"Python3","time":"4 months, 3 weeks","timestamp":1699211758,"status":10,"status_display":"Accepted","runtime":"120 ms","url":"/submissions/detail/1092264934/","is_pending":"Not Pending","title":"Longest Subsequence With Limited Sum","memory":"16.6 MB","code":"class Solution:\n\n    def binary_search(self, target, A):\n\n        l = 0\n        r = len(A) - 1\n\n        while l <= r:\n\n            mid = l + (r-l)//2\n\n            if target == A[mid]:    \n                return mid\n            elif target < A[mid]:\n                r = mid - 1\n            else: #target > A[mid]\n                if mid+1 <= len(A)-1 and A[mid+1] > target:\n                    return mid\n                l = mid + 1\n\n        if mid == 0 and A[0] > target:\n            return -1 \n        else: \n            return mid\n\n    def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:\n        \n        nums.sort()\n        sumA = [nums[0]]\n        answer = []\n\n        for i in range(1, len(nums)):\n\n            sumA.append(sumA[i-1] + nums[i])\n\n        for query in queries:\n            \n            answer.append(self.binary_search(query, sumA) + 1)\n\n        return answer\n        \n","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"longest-subsequence-with-limited-sum","has_notes":false,"flag_type":1}