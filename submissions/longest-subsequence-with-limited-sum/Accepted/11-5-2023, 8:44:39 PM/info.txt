{"id":1092281381,"question_id":2469,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1699213479,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1092281381/","is_pending":"Not Pending","title":"Longest Subsequence With Limited Sum","memory":"44.2 MB","code":"class Solution {\n\n    public int floorBinarySearch(int[] arr, int target){\n        \n        int l = 0;\n        int r = arr.length - 1;\n        int mid = -1;\n\n        while (l <= r){\n\n            mid = l + (r-l)/2;\n            int midVal = arr[mid];\n\n            if (midVal == target){\n                return mid;\n            } else if (target < midVal){\n                r = mid - 1;\n            } else{ // target > midVal\n                if (mid + 1 <= arr.length -1 && arr[mid+1] > target){\n                    return mid;\n                }\n                l = mid + 1;\n            }\n\n        }\n\n        if (r < 0){\n            return -1;\n        } \n        return mid;\n    }\n\n    public int[] answerQueries(int[] nums, int[] queries) {\n\n        Arrays.sort(nums);\n\n        for (int i=1; i<nums.length; i++){\n            \n            nums[i] = nums[i-1] + nums[i];\n\n        }\n\n        for (int i=0; i<queries.length; i++){\n\n            queries[i] = floorBinarySearch(nums, queries[i]) + 1;\n\n        }\n        \n        return queries;\n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"longest-subsequence-with-limited-sum","has_notes":false,"flag_type":1}