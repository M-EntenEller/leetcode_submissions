{"id":1002089928,"question_id":146,"lang":"python3","lang_name":"Python3","time":"8 months, 1 week","timestamp":1690142441,"status":10,"status_display":"Accepted","runtime":"825 ms","url":"/submissions/detail/1002089928/","is_pending":"Not Pending","title":"LRU Cache","memory":"78.6 MB","code":"class Node:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.prev = None\n        self.next = None\n\n    def __str__(self):\n        return \"key-{} value-{}\".format(self.key, self.value)\n\nclass LRUCache:\n\n    def __init__(self, capacity: int):\n        self._hashmap = {}\n        self.capacity = capacity\n        self.n = 0\n        self.head = None\n        self.tail = None\n\n    def is_full(self):\n        return self.n == self.capacity\n\n    def touch_node(self, node):\n        if node == self.head:\n            return\n\n        node.prev.next = node.next\n        if not node == self.tail:\n            node.next.prev = node.prev\n        else: \n            self.tail = self.tail.prev\n            \n        self.head.prev = node\n        node.next = self.head\n        self.head = node\n\n    def get(self, key: int) -> int:\n        node = self._hashmap.get(key, None)\n        if node: \n            self.touch_node(node)\n            return node.value\n        else: \n            return -1\n\n    def put(self, key: int, value: int) -> None:     \n        node = self._hashmap.get(key, None)\n        if node:\n            node.value = value\n            self.touch_node(node)\n            return\n\n        new_node = Node(key, value)\n\n        if self.is_full():\n            \n            self._hashmap.pop(self.tail.key) \n            self._hashmap[key] = new_node\n\n            if self.capacity > 1:   \n                \n                self.tail.prev.next = None \n                self.tail = self.tail.prev\n                new_node.next = self.head\n                self.head.prev = new_node\n                self.head = new_node\n            else:\n                self.head = self.tail = new_node\n\n            return\n\n        self._hashmap[key] = new_node\n        self.n += 1\n\n        if not (self.head and self.tail):\n            self.head = self.tail = new_node\n            return \n\n        if self.head: \n            self.head.prev = new_node\n            new_node.next = self.head\n            self.head = new_node\n            return \n\n        \n        \n       \n\n\n        \n\n        \n        \n        \n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"1111111111111111111111","title_slug":"lru-cache","has_notes":false,"flag_type":1}