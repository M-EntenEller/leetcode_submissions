{"id":740197630,"question_id":46,"lang":"python3","lang_name":"Python3","time":"1 year, 8 months","timestamp":1657125284,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/740197630/","is_pending":"Not Pending","title":"Permutations","memory":"14.1 MB","code":"class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        n = len(nums)\n        nodes = set(nums)\n        \n        def _recursive_paths(node: int, path: List[int]) -> List[List[int]]:\n            if len(path) == n:\n                return [path]\n            lst = []\n            for neighbor in nodes:\n                if neighbor not in path:\n                    # concatenate list\n                    veje =_recursive_paths(neighbor, path + [neighbor])\n                    lst += veje\n            return lst\n              \n        permutations = []\n        for node in nodes:\n            permutations += _recursive_paths(node, path=[node])\n        return permutations\n            \n        \n                            \n                            \n    \n        ","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1}