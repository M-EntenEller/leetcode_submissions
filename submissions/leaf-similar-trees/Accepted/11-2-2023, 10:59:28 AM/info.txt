{"id":1089787719,"question_id":904,"lang":"python3","lang_name":"Python3","time":"4 months, 3 weeks","timestamp":1698919168,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/1089787719/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"16 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n\n    def leaf_sequence(root):\n\n        if not root: \n            return []\n\n        if not root.left and not root.right:\n            return [root.val]\n\n        return Solution.leaf_sequence(root.left) + Solution.leaf_sequence(root.right)\n\n    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:\n\n        s1 = Solution.leaf_sequence(root1)\n        s2 = Solution.leaf_sequence(root2)\n\n        if len(s1) != len(s2):\n            return False\n\n        for i in range(len(s1)):\n\n            if s1[i] != s2[i]:\n                return False\n\n        return True\n        \n        ","compare_result":"1111111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}