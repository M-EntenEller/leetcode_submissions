{"id":1089820240,"question_id":904,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1698923483,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1089820240/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"41.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    private List<Integer> leafSequence(TreeNode root){\n        \n        if (root==null){\n            return new ArrayList<Integer>();\n        }\n\n        if (root.left == null && root.right == null){\n            return new ArrayList<Integer>(){{add(root.val);}};\n        }\n        \n        return Stream.concat(leafSequence(root.left).stream(), leafSequence(root.right).stream()).toList();\n    }\n\n    public boolean leafSimilar(TreeNode root1, TreeNode root2) {\n\n        List<Integer> l = leafSequence(root1);\n        List<Integer> r = leafSequence(root2);\n\n        if (l.size() != r.size()){\n            return false;\n        } \n\n        for (int i=0; i<l.size(); i++){\n\n            if (l.get(i) != r.get(i)){\n                return false;\n            }\n\n        }\n        \n        return true;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}