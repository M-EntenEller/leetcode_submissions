{"id":1060854165,"question_id":2327,"lang":"python3","lang_name":"Python3","time":"6Â months","timestamp":1695848413,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/1060854165/","is_pending":"Not Pending","title":"Largest Number After Digit Swaps by Parity","memory":"16.1 MB","code":"class Solution:\n    def largestInteger(self, num: int) -> int:\n\n        def int_to_digits(num):\n            digits = []\n            while num > 0:\n                digits.append(num % 10)\n                num = num // 10\n            \n            digits.reverse()\n            return digits\n\n        def digits_to_int(digits):\n            res = 0\n            n = len(digits)\n            \n            i=0\n            while i < n:\n\n                res += digits[i] * 10**(n-1-i) \n                i += 1\n        \n            return res\n                \n\n        digits = int_to_digits(num)\n        even = []\n        odd = []\n\n        for i, digit in enumerate(digits): \n\n            if digit % 2 == 0:\n                even.append(digit)\n            else:\n                odd.append(digit)\n\n        even.sort()\n        odd.sort()\n        \n        for i, d in enumerate(digits):\n\n            if d % 2 == 0:\n                digits[i] = even.pop() \n            else:\n                digits[i] = odd.pop()\n\n        return digits_to_int(digits)\n\n\n\n            \n\n\n         \n\n\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-number-after-digit-swaps-by-parity","has_notes":false,"flag_type":1}