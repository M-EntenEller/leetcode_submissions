{"id":1087528479,"question_id":1708,"lang":"c","lang_name":"C","time":"4 months, 4 weeks","timestamp":1698669047,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/1087528479/","is_pending":"Not Pending","title":"Design Parking System","memory":"21.4 MB","code":"\n\n\ntypedef struct {\n    int big;\n    int medium;\n    int small;    \n} ParkingSystem;\n\n\nParkingSystem* parkingSystemCreate(int big, int medium, int small) {\n    \n    ParkingSystem* ps = (ParkingSystem*) malloc(sizeof(ParkingSystem));\n    ps->big = big;\n    ps->medium = medium;\n    ps->small = small;\n    return ps;\n\n}\n\nbool parkingSystemAddCar(ParkingSystem* obj, int carType) {\n  \n    switch (carType){\n        case 1: \n            return --obj->big >= 0;\n        case 2:\n            return --obj->medium >= 0;\n        case 3:\n            return --obj->small >= 0;\n    }\n\n    return 0;\n\n}\n\nvoid parkingSystemFree(ParkingSystem* obj) {\n    \n    free(obj);\n\n}\n\n/**\n * Your ParkingSystem struct will be instantiated and called as such:\n * ParkingSystem* obj = parkingSystemCreate(big, medium, small);\n * bool param_1 = parkingSystemAddCar(obj, carType);\n \n * parkingSystemFree(obj);\n*/","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"design-parking-system","has_notes":false,"flag_type":1}