{"id":1091203660,"question_id":303,"lang":"c","lang_name":"C","time":"4 months, 3 weeks","timestamp":1699094091,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1091203660/","is_pending":"Not Pending","title":"Range Sum Query - Immutable","memory":"12 MB","code":"\n\n\ntypedef struct {\n    int* sa;\n} NumArray;\n\n\nNumArray* numArrayCreate(int* nums, int numsSize) {\n    \n    int* a = (int*) malloc(sizeof(int)*(numsSize+1));\n    a[0] = 0;\n    \n    for (int i=1; i<numsSize+1; i++){\n        \n        a[i] = a[i-1] + nums[i-1];\n\n    }\n\n    NumArray* res = (NumArray*) malloc(sizeof(NumArray));\n    res->sa = a;\n    return res;\n}\n\nint numArraySumRange(NumArray* obj, int left, int right) {\n    \n    return obj->sa[right+1] - obj->sa[left];\n\n}\n\nvoid numArrayFree(NumArray* obj) {\n\n    free(obj->sa);\n    free(obj);\n    \n}\n\n/**\n * Your NumArray struct will be instantiated and called as such:\n * NumArray* obj = numArrayCreate(nums, numsSize);\n * int param_1 = numArraySumRange(obj, left, right);\n \n * numArrayFree(obj);\n*/","compare_result":"111111111111111","title_slug":"range-sum-query-immutable","has_notes":false,"flag_type":1}