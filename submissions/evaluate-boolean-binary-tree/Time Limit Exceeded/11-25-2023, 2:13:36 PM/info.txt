{"id":1106055752,"question_id":2416,"lang":"java","lang_name":"Java","time":"4Â months","timestamp":1700918016,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1106055752/","is_pending":"Not Pending","title":"Evaluate Boolean Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    private boolean binOperator(boolean b1, boolean b2, int flag){\n\n        if (flag == 2){\n            return b1 || b2;\n        }\n\n        return b1 && b2;\n\n    }\n\n    public boolean evaluateTree(TreeNode root) {\n        \n        List<TreeNode> stack = new ArrayList<>();\n        List<Boolean> res = new ArrayList<>();\n        TreeNode tmp;\n\n        stack.add(root);\n\n        while (stack.size() > 0)\n        {\n            tmp = stack.get(stack.size()-1); //peek\n\n            if (tmp.val < 2) //leaf node\n            { \n                res.add(tmp.val == 1);\n                stack.remove(stack.size()-1);\n            } \n            else if (res.size() < 2)\n            {\n                stack.add(tmp.right);\n                stack.add(tmp.left);\n            } \n            else\n            {\n                stack.remove(stack.size()-1);\n                res.add( binOperator(res.remove(res.size()-1), res.remove(res.size()-1), tmp.val) );\n            }\n        }\n        \n        return (boolean) res.get(0); \n\n    }\n}","compare_result":"110000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"evaluate-boolean-binary-tree","has_notes":false,"flag_type":1}